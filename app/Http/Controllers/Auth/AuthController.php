<?php

namespace App\Http\Controllers\Auth;

use App\User;
use Validator;
use App\Http\Controllers\Controller;
use Illuminate\Foundation\Auth\ThrottlesLogins;
use Illuminate\Foundation\Auth\AuthenticatesAndRegistersUsers;
use Auth;
use Illuminate\Http\Request;
use Config;

class AuthController extends Controller
{
    /*
    |--------------------------------------------------------------------------
    | Registration & Login Controller
    |--------------------------------------------------------------------------
    |
    | This controller handles the registration of new users, as well as the
    | authentication of existing users. By default, this controller uses
    | a simple trait to add these behaviors. Why don't you explore it?
    |
    */

    use AuthenticatesAndRegistersUsers, ThrottlesLogins;

    /**
     * Create a new authentication controller instance.
     *
     * @return void
     */
    public function __construct()
    {
        $this->middleware('guest', [
            'except' => [
                'getLogout',
                'getSettings',
                'postSettings'
            ]
        ]); 
    }

    /**
     * Get a validator for an incoming registration request.
     *
     * @param  array  $data
     * @return \Illuminate\Contracts\Validation\Validator
     */
    protected function validator(array $data)
    {
        return Validator::make($data, [
            'name'      => 'required|max:255',
            'email'     => 'required|email|max:255|unique:users',
            'password'  => 'required|confirmed|min:6'
        ]);
    }

    /**
     * Create a new user instance after a valid registration.
     *
     * @param  array  $data
     * @return User
     */
    protected function create(array $data)
    {
        return User::create([
            'name' => $data['name'],
            'email' => $data['email'],
            'password' => bcrypt($data['password']),
        ]);
    }

    public function postLogin(Request $request)
    {

        //dd(session()->all());

        $rules = [
            'email'     => 'required|email',
            'password'  => 'required'
        ];

        if(
            $request->session()->has('captcha_fails_counter') 
            && (int)$request->session()->get('captcha_fails_counter') >= (int)config()->get('custom.settings.captcha_fails_limit')
        )
            $rules['captcha'] = 'required|captcha';

        $this->validate($request, $rules);

        $throttles = $this->isUsingThrottlesLoginsTrait();

        if ($throttles && $this->hasTooManyLoginAttempts($request)) {
            return $this->sendLockoutResponse($request);
        }

        $credentials = $request->only('email', 'password');

        if (Auth::attempt($credentials, $request->has('remember')))
        {
            $request->session()->forget('captcha_fails_counter');
            return $this->handleUserWasAuthenticated($request, $throttles);
        }

        $request->session()->put('captcha_fails_counter', $request->session()->has('captcha_fails_counter')?((int)$request->session()->get('captcha_fails_counter') + 1):0);

        return redirect()
            ->route('auth.login')
            ->withInput($request->only('email'))
            ->withErrors([
                'email' => $this->getFailedLoginMessage(),
            ]);
    }


    public function getSettings()
    {
        $currentUser = Auth::user();
        return view('auth.settings', compact('currentUser'));
    }

    public function postSettings(Request $request)
    {

        $currentUser = Auth::user();

        $validator = Validator::make($request->all(), [
            'name'      => 'required|string',
            'email'     => 'required|unique:users,email,'.$currentUser->id,
            'language'  => 'required|in:'. implode(',', array_keys((array)Config::get('app.locales'))),
            'activated' => 'in:true'
        ]);

        if(!$validator->fails()){

            $currentUser->email     = $request->get('email');
            $currentUser->name      = $request->get('name');
            $currentUser->language  = $request->get('language');
            $currentUser->activated = ($request->get('activated') == 'true');
            $currentUser->save();

            return redirect()->route('auth.settings')->with('message', [
                'type'      => 'success',
                'message'   => trans('auth.settings.form.alert.update')
            ]);
        }else
            return redirect()->route('auth.settings')->with('message', [
                'type'      => 'danger',
                'message'   => $validator->messages()->first()
            ]);
    }
}
