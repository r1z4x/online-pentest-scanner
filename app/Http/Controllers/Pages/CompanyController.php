<?php

namespace App\Http\Controllers\Pages;

use Illuminate\Http\Request;

use App\Http\Requests;
use App\Http\Controllers\Controller;
use Kris\LaravelFormBuilder\FormBuilder;
use App\Http\Requests\CompanyRequest;
use App\Http\Requests\CompanySettingRequest;

use App\Company;

class CompanyController extends Controller
{
    private $user;
    private $company;

    /**
    * Instantiate a new CompanyController instance.
    */
    public function __construct()
    {
        $this->middleware('role:admin', [
            'except' => ['setting', 'storeSetting']
        ]);

        $this->user = auth()->user();
        if ($this->user)
            $this->company = $this->user->company;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $companies = Company::orderBy('id', 'DESC')->paginate();
        return view('pages.companies.index', compact('companies'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(FormBuilder $formBuilder)
    {
        $form = $formBuilder->create('App\Forms\CompanyForm', [
            'method'    => 'POST',
            'url'       => route('pages.companies.store'),
            'class'     => 'form-horizontal'
        ]);

        return view('pages.companies.create', compact('form'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Company $company, CompanyRequest $request)
    {
        $company->fill($request->all());

        ( $company->save() == true )

            ? 

        session()->flash('messages', [ 
            'type'      => 'success',
            'message'   => trans('pages.companies_create.saved_company')
        ])

            :
        
        session()->flash('messages', [ 
            'type'      => 'danger',
            'message'   => trans('pages.companies_create.fails_company')
        ]);

        return redirect()->route('pages.companies');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Company $company)
    {
        return view('pages.companies.show', compact('company'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit(Company $company, FormBuilder $formBuilder)
    {
        $form = $formBuilder->create('App\Forms\CompanyForm', [
            'method'    => 'PATCH',
            'url'       => route('pages.companies.update', $company->id),
            'class'     => 'form-horizontal',
            'model'     => $company->toArray()
        ]);

        return view('pages.companies.edit', compact('form', 'company'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(CompanyRequest $request, Company $company)
    {
         $company->fill($request->all());

        ( $company->save() === true )

            ? 
        
        session()->flash('messages', [ 
            'type'      => 'success',
            'message'   => trans('pages.companies_edit.updated_company')
        ])

            :

        session()->flash('messages', [ 
            'type'      => 'danger',
            'message'   => trans('pages.companies_edit.fails_company')
        ]);

        return redirect()->route('pages.companies');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(Company $company)
    {
        ( $company->delete() === true )

            ?

        session()->flash('messages', [ 
            'type'      => 'success',
            'message'   => trans('pages.companies_delete.deleted_company')
        ])

            :

        session()->flash('messages', [ 
            'type'      => 'success',
            'message'   => trans('pages.companies_delete.fails_company')
        ]);

        return redirect()->route('pages.companies');
    }

    /**
     * Display the specified resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function setting()
    {
        $company = $this->company;
        return view('pages.companies.setting', compact('company'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function storeSetting(CompanySettingRequest $request)
    {
        $this->company->fill([
            'setting' => (array)$request->except(['_token'])
        ]);

        ( $this->company->save() == true )

            ? 

        session()->flash('messages', [ 
            'type'      => 'success',
            'message'   => trans('pages.companies_setting.updated_setting')
        ])

            :
        
        session()->flash('messages', [ 
            'type'      => 'danger',
            'message'   => trans('pages.companies_setting.fails_setting')
        ]);

        return redirect()->route('pages.companies.setting');
    }
}
