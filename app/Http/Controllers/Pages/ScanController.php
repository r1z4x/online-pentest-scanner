<?php

namespace App\Http\Controllers\Pages;

use Illuminate\Http\Request;
use Carbon\Carbon;

use App\Http\Requests;
use App\Http\Requests\ScanRequest;
use App\Http\Requests\API\ScanAPIRequest;

use App\Models\User;
use App\Models\Scan;
use App\Models\Profile;

use App\Http\Controllers\Controller;

class ScanController extends Controller
{
    private $user;
    private $company;

    /**
    * Instantiate a new ScanController instance.
    */
    public function __construct()
    {
        $this->user = auth()->user();
        if ($this->user)
            $this->company = $this->user->company;
    }

    /**
     * Display a listing of the scans.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $scans = Scan::where('owner_id', '=', $this->user->id)->orderBy('finished_at', 'DESC')->orderBy('updated_at', 'DESC')->paginate();

        return view('pages.scans.index', compact('scans'));
    }

    /**
     * Show the form for creating a new scan.
     *
     * @return \Illuminate\Http\Response
     */
    public function create($type = 'general-information')
    {
        if($type != 'general-information' && (!session()->has('scans_create') || !count(session()->get('scans_create'))))
            return redirect()->route('pages.scans.create', 'general-information');
        elseif(session()->has('scans_create_step') && session()->get('scans_create_step') != $type)
            return redirect()->route('pages.scans.create', session()->get('scans_create_step'));

        $url_lists = [];

        $profiles = Profile::orderBy('name', 'DESC')->get();

        if($type == 'scan-settings')
            $tmp_url_lists = (array)session()->get('scans_create.tmp_url_lists');

        return view('pages.scans.create', compact('profiles', 'type', 'tmp_url_lists'));
    }

    /**
     * Store a newly created scan in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(ScanRequest $request, $type = 'general-information')
    {

        if($type != 'general-information' && (!session()->has('scans_create') || !count(session()->get('scans_create'))))
            return redirect()->route('pages.scans.create', 'general-information');

        if($type == 'general-information'){

            session()->put('scans_create', $request->only(['name', 'profile', 'active', 'description']));
            session()->put('scans_create_step', 'scan-settings');

            return redirect()->route('pages.scans.create', 'scan-settings');
        
        }elseif($type == 'scan-settings'){

            dd($request->all());
        }
    }

    /**
     * Display the specified scan.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    //API

    public function postAPIAddScanURL(ScanAPIRequest $request)
    {
        $data = [];

        if($request->has('_url') && $request->session()->has('scans_create')){

            $key = str_random(3) . '-' . str_random(10);

            if(!$request->session()->has('scans_create.tmp_url_lists') || !($data = $this->checkWhatEver($request->session()->get('scans_create.tmp_url_lists'), 'url', $request->get('_url'))))
            {
                $data = [
                    'url'           => $request->get('_url'),
                    'file-token'    => 'pentora-' . $key . '.html',
                    'content-token' => $key,
                    'token-check'   => false,
                    'token-check-date' => null//Carbon::now()->toDateTimeString()
                ];

                $request->session()->push('scans_create.tmp_url_lists', $data);
            }
            
        }

        return response()->json( [ 'status' => (boolean)count($data) , 'results' => $data ] );
    }

    private function checkWhatEver($array, $key, $val)
    {
        foreach ($array as $item)
            if (isset($item[$key]) && $item[$key] == $val)
                return $item;

        return false;
    }
}
