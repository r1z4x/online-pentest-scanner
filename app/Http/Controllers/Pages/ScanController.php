<?php

namespace App\Http\Controllers\Pages;

use Illuminate\Http\Request;
use Carbon\Carbon;
use Laracurl;

use App\Http\Requests;
use App\Http\Requests\ScanRequest;
use App\Http\Requests\API\ScanAPIRequest;

use App\Models\User;
use App\Models\Scan;
use App\Models\Profile;

use App\Http\Controllers\Controller;

class ScanController extends Controller
{
    private $user;
    private $company;

    /**
    * Instantiate a new ScanController instance.
    */
    public function __construct()
    {
        $this->user = auth()->user();
        if ($this->user)
            $this->company = $this->user->company;
    }

    /**
     * Display a listing of the scans.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $scans = Scan::where('owner_id', '=', $this->user->id)->orderBy('finished_at', 'DESC')->orderBy('updated_at', 'DESC')->paginate(2);
        return view('pages.scans.index', compact('scans'));
    }

    /**
     * Show the form for creating a new scan.
     *
     * @return \Illuminate\Http\Response
     */
    public function create($type = 'general-information')
    {
        $scans = Scan::where('owner_id', '=', $this->user->id)->orderBy('finished_at', 'DESC')->orderBy('updated_at', 'DESC')->get();

        if( $scans->count() >= (int)config('custom.limits.free.new_user_max_create_scans_count') )
            return redirect()->route('pages.scans')->with('messages', [
                'type'      => 'danger',
                'message'   => trans('pages.scans_create.forms.limit_error')
            ]);

        if($type == 'cancel'){
            session()->forget('scans_create');
            session()->forget('scans_create_step');
            return redirect()->route('pages.scans.create', 'general-information');
        }

        if($type != 'general-information' && (!session()->has('scans_create') || !count(session()->get('scans_create'))))
            return redirect()->route('pages.scans.create', 'general-information');
        elseif(session()->has('scans_create_step') && session()->get('scans_create_step') != $type)
            return redirect()->route('pages.scans.create', session()->get('scans_create_step'));

        $tmp_url_lists  = [];
        $url_lists      = [];
        $scans_create   = [];
        $profile_name   = null;

        $profiles       = Profile::orderBy('name', 'DESC')->get();
        $repeats        = Scan::$repeats;
        $timezones      = \DateTimeZone::listIdentifiers();

        if($type == 'scan-settings')
            $tmp_url_lists = (array)session()->get('scans_create.tmp_url_lists');

        if($type == 'completed'){
            $url_lists      = (array)session()->get('scans_create.url_lists');
            $scans_create   = session()->get('scans_create');

            if(session()->has('scans_create.profile') && session()->get('scans_create.profile') > 0)
                $profile_name   = Profile::find(session()->get('scans_create.profile'))->name;


        }

        return view('pages.scans.create', compact('profiles', 'type', 'tmp_url_lists', 'repeats', 'timezones', 'url_lists', 'scans_create', 'profile_name'));
    }

    /**
     * Store a newly created scan in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(ScanRequest $request, $type = 'general-information')
    {
        if($type != 'general-information' && (!session()->has('scans_create') || !count(session()->get('scans_create'))))
            return redirect()->route('pages.scans.create', 'general-information');

        if($type == 'general-information'){

            session()->put('scans_create', $request->only(['name', 'profile', 'active', 'description']));
            session()->put('scans_create_step', 'scan-settings');

            return redirect()->route('pages.scans.create', 'scan-settings');

        }elseif($type == 'scan-settings'){

            if( !session()->has('scans_create.tmp_url_lists') || !count(session()->get('scans_create.tmp_url_lists')) )
                return redirect()->route('pages.scans.create', 'scan-settings')->with('messages', [
                    'type'      => 'danger',
                    'message'   => trans('pages.scans_create.forms.not_found_url_lists')
                ]);

            session()->put('scans_create.url_lists', session()->get('scans_create.tmp_url_lists'));
            session()->put('scans_create_step', 'schedule-settings');

            return redirect()->route('pages.scans.create', 'schedule-settings');
        }elseif($type == 'schedule-settings'){

            if(!$request->has('_skip'))
                session()->put('scans_create', array_merge(session()->get('scans_create'), $request->only(['repeat', 'starts_on_date', 'starts_on_time', 'starts_on_utc', 'repeat_every'])));

            session()->put('scans_create_step', 'completed');

            return redirect()->route('pages.scans.create', 'completed');
        }elseif($type == 'completed'){

            $scan = Scan::create([
                'name'          => session()->get('scans_create.name'),
                'active'        => (boolean)session()->get('scans_create.active'),
                'description'   => session()->get('scans_create.description'),
                'owner_id'      => $this->user->id,
                'profile_id'    => (integer)session()->get('scans_create.profile'),
                'urls'          => (array)session()->get('scans_create.url_lists'),
                /*'assets'          => (array)session()->get('scans_create.asset_lists'),*/
            ]);

            if($scan){

                session()->forget('scans_create');
                session()->forget('scans_create_step');

                return redirect()->route('pages.scans')->with('messages', [
                    'type'      => 'success',
                    'message'   => trans('pages.scans_create.forms.save_success'),
                    'scan_id'   => $scan->id
                ]);
            }
            else
                return redirect()->route('pages.scans.create', 'completed')->with('messages', [
                    'type'      => 'danger',
                    'message'   => trans('pages.scans_create.forms.save_error')
                ]);
        }
    }

    /**
     * Display the specified scan.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }

    //API

    public function postAPIAddScanURL(ScanAPIRequest $request)
    {
        $data = [];

        if($request->has('_url') && $request->session()->has('scans_create')){

            $key = str_random(3) . '-' . str_random(10);

            if(
                (
                    count($request->session()->has('scans_create.tmp_url_lists')) <= (int)config('custom.limits.free.new_user_max_create_scans_url_count')
                    && !$request->session()->has('scans_create.tmp_url_lists')
                ) || !($data = $this->checkWhatEver($request->session()->get('scans_create.tmp_url_lists'), 'url', $request->get('_url'))))
            {
                $data = [
                    'url'           => $request->get('_url'),
                    'file-token'    => 'pentora-' . $key . '.html',
                    'content-token' => $key,
                    'token-check'   => false,
                    'token-check-date' => null//Carbon::now()->toDateTimeString()
                ];

                $request->session()->push('scans_create.tmp_url_lists', $data);
            }

        }

        return response()->json( [ 'status' => (boolean)count($data) , 'results' => $data ] );
    }

    public function postAPIRemoveScanURL(ScanAPIRequest $request)
    {
        $status = false;

        if($request->has('_url') && $request->session()->has('scans_create.tmp_url_lists') && $this->checkWhatEver($request->session()->get('scans_create.tmp_url_lists'), 'url', $request->get('_url')))
        {
            $request->session()->put('scans_create.tmp_url_lists', $this->removeWhatEver($request->session()->get('scans_create.tmp_url_lists'), 'url', $request->get('_url')));

            $status = true;
        }

        return response()->json( [ 'status' => $status ] );
    }

    public function postAPICheckScanURL(ScanAPIRequest $request)
    {
        $status = false;
        $data   = [];

        if($request->has('_url') && $request->session()->has('scans_create.tmp_url_lists')
          && ($data = $this->checkWhatEver($request->session()->get('scans_create.tmp_url_lists'), 'url', $request->get('_url'), true)) //true => indexing
          && $this->checkingURL(rtrim($request->get('_url'), '/') . '/' . (string)$data['file-token'], (string)$data['content-token'])
          && $data['token-check'] == false
        ){
            $data['token-check'] = true;
            $data['token-check-date'] = Carbon::now()->toDateTimeString();
            $request->session()->put('scans_create.tmp_url_lists', $this->updateWhatEver($request->session()->get('scans_create.tmp_url_lists'), 'url', $request->get('_url'), $data));

            $status = true;
        }

        return response()->json( [ 'status' => $status , 'results' => $data ] );
    }

    private function checkingURL($url, $code )
    {
        $response = Laracurl::get($url);
        return ( trim(preg_replace('/\s+/', ' ', $response->body)) == $code && $response->statusCode == 200 );
    }

    private function checkWhatEver($array, $key, $val)
    {
        foreach ($array as $item)
            if (isset($item[$key]) && $item[$key] == $val)
                return $item;

        return false;
    }

    private function removeWhatEver($array, $key, $val)
    {
        foreach ($array as $index => $item)
            if (isset($item[$key]) && $item[$key] == $val){
                unset($array[$index]);
                return array_values($array);
            }

        return false;
    }

    private function updateWhatEver($array, $key, $val, $new_val)
    {
        $updated = false;

        foreach ($array as $index => $item)
            if (isset($item[$key]) && $item[$key] == $val && $new_val){
                $array[$index] = $new_val;
                $updated = true;
            }

        return ( $updated ? $array : false );
    }
}
