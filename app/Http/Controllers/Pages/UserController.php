<?php

namespace App\Http\Controllers\Pages;

use Illuminate\Http\Request;

use App\Http\Requests;
use App\Http\Controllers\Controller;
use Kris\LaravelFormBuilder\FormBuilder;
use App\Http\Requests\UserRequest;

use App\User;
use App\Company;
use App\Branch;
use Bican\Roles\Models\Role;

class UserController extends Controller
{
    private $user;

    /**
    * Instantiate a new UserController instance.
    */
    public function __construct()
    {
        $this->middleware('role:admin', ['except' => [
            'profile',
        ]]);

        $this->user = auth()->user();
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $users = User::orderBy('company_id', 'ASC')->orderBy('id', 'DESC')->paginate();
        return view('pages.users.index', compact('users'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @param  FormBuilder $formBuilder
     * @return \Illuminate\Http\Response
     */
    public function create(FormBuilder $formBuilder)
    {
        $companies = Company::orderBy('name', 'ASC')->lists('name', 'id')->toArray();
        $languages = config()->get('app.locales');
        $accesses  = Role::orderBy('name', 'ASC')->lists('name', 'id')->toArray();

        $form = $formBuilder->create('App\Forms\UserForm', [
            'method'    => 'POST',
            'url'       => route('pages.users.store'),
            'class'     => 'form-horizontal'
        ], [
            'companies' => $companies,
            'languages' => $languages,
            'accesses'  => $accesses,
            'branches'  => []
        ]);

        return view('pages.users.create', compact('form'));
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  User $user
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(User $user, UserRequest $request)
    {
        $status = false;

        if($request->has('access')){
            $role = Role::find($request->get('access'));

            if($role->name == 'Company User')
                $user->fill($request->except(['access']));
            else
                $user->fill($request->except(['access', 'branch_id']));

            $status = true;
        }

        $save_status = $user->save();

        if( $status && $save_status == true )
        {
            $user->roles()->attach($request->get('access'));
        }

        ( $status && $save_status == true )

            ? 

        session()->flash('messages', [ 
            'type'      => 'success',
            'message'   => trans('pages.users_create.saved_user')
        ])

            :

        session()->flash('messages', [ 
            'type'      => 'danger',
            'message'   => trans('pages.users_create.fails_user')
        ]);

        return redirect()->route('pages.users');
    }

    /**
     * Display the specified resource.
     *
     * @param  User  $user
     * @return \Illuminate\Http\Response
     */
    public function show(User $user)
    {
        return view('pages.users.show', compact('user'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  User  $user
     * @param  FormBuilder $formBuilder
     * @return \Illuminate\Http\Response
     */
    public function edit(User $user, FormBuilder $formBuilder)
    {
        $companies = Company::orderBy('name', 'ASC')->lists('name', 'id')->toArray();
        $languages = config()->get('app.locales');
        $accesses  = Role::orderBy('name', 'ASC')->lists('name', 'id')->toArray();
        $branches  = Branch::where('company_id', '=', $user->company_id)->orderBy('name', 'ASC')->lists('name', 'id')->toArray();

        $data = $user->toArray();

        $form = $formBuilder->create('App\Forms\UserForm', [
            'method'    => 'PATCH',
            'url'       => route('pages.users.update', $user->id),
            'class'     => 'form-horizontal',
            'model'     => array_merge($data, ['access' => $user->roles[0]->id])
        ], [
            'companies' => $companies,
            'languages' => $languages,
            'accesses'  => $accesses,
            'branches'  => $branches
        ]);

        return view('pages.users.edit', compact('form', 'user'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  User  $user
     * @return \Illuminate\Http\Response
     */
    public function update(UserRequest $request, User $user)
    {
        $status = false;

        $except = [];

        if(!$request->has('password')){
            $except[] = 'password';
            $except[] = 'password_confirmation';
        }

        if($request->has('access')){
            $role = Role::find($request->get('access'));

            if($role->name == 'Company User')
                $except[] = 'access';
            else{
                $except[] = 'access';
                $except[] = 'branch_id';
            }

            $status = true;
        }

        $user->fill($request->except($except));

        $save_status = $user->save();

        if( $status && $save_status == true )
        {
            $user->roles()->sync([$request->get('access')]);
        }

        ( $status && $save_status == true )

            ? 
        
        session()->flash('messages', [ 
            'type'      => 'success',
            'message'   => trans('pages.users_edit.updated_user')
        ])

            :

        session()->flash('messages', [ 
            'type'      => 'danger',
            'message'   => trans('pages.users_edit.fails_user')
        ]);

        return redirect()->route('pages.users');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  User  $user
     * @return \Illuminate\Http\Response
     */
    public function destroy(User $user)
    {
        ( $user->delete() === true )

            ?

        session()->flash('messages', [ 
            'type'      => 'success',
            'message'   => trans('pages.users_delete.deleted_user')
        ])

            :

        session()->flash('messages', [ 
            'type'      => 'success',
            'message'   => trans('pages.users_delete.fails_user')
        ]);

        return redirect()->route('pages.users');
    }

    /**
     * Display the specified resource.
     *
     * @param  User  $user
     * @return \Illuminate\Http\Response
     */
    public function profile()
    {
        $user = auth()->user();
        return view('pages.users.profile', compact('user'));
    }
}
